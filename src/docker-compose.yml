services:
  # Spark Master Node
  spark-master:
    container_name: spark-master
    hostname: spark-master
    build:
      context: .
      dockerfile: Dockerfile.spark
    command: bin/spark-class org.apache.spark.deploy.master.Master
    volumes:
      - ./config:/opt/bitnami/spark/config
      - ./jobs:/opt/bitnami/spark/jobs
      - ./datasets:/opt/bitnami/spark/datasets
      - ./requirements.txt:/requirements.txt
      - ./app:/opt/bitnami/spark/app
    ports:
      - "9090:8080"    # Spark Master Web UI
      - "7077:7077"    # Spark Master Port
    networks:
      - code-with-yu

  # Spark Worker Node
  spark-worker: &worker
    container_name: spark-worker
    hostname: spark-worker
    build:
      context: .
      dockerfile: Dockerfile.spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    volumes:
      - ./config:/opt/bitnami/spark/config
      - ./jobs:/opt/bitnami/spark/jobs
      - ./datasets:/opt/bitnami/spark/datasets
      - ./requirements.txt:/requirements.txt
      - ./app:/opt/bitnami/spark/app
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - code-with-yu
  spark-worker-2:
    <<: *worker
    container_name: spark-worker-2
    hostname: spark-worker-2
  
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - code-with-yu

  kafka1: &kafka
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_NUM_PARTITIONS: 4
    depends_on:
      - zoo1
    networks:
      - code-with-yu

  kafka2:
    <<: *kafka
    container_name: kafka2
    hostname: kafka2
  
  kafdrop:
      image: obsidiandynamics/kafdrop:3.27.0
      networks:
        - code-with-yu
      depends_on:
        - zoo1
      ports:
        - 19000:9000
      environment:
        KAFKA_BROKERCONNECT: kafka1:29092,kafka2:29093,kafka3:29094
  namenode:
    image: apache/hadoop:3
    hostname: namenode
    command: [ "hdfs", "namenode" ]
    depends_on:
      - resourcemanager
      - nodemanager
    ports:
      - 9870:9870
    env_file:
      - ./config-hadoop
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    networks:
      - code-with-yu
    volumes:
      - hadoop:/home/
    restart: on-failure

  datanode:
    image: apache/hadoop:3
    command: [ "hdfs", "datanode" ]
    depends_on:
      - namenode
    env_file:
      - ./config-hadoop
    networks:
      - code-with-yu
    volumes:
      - hadoop:/home/
    restart: on-failure

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    command: [ "yarn", "resourcemanager" ]
    ports:
      - 8088:8088
    env_file:
      - ./config-hadoop
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - code-with-yu
    restart: on-failure

  nodemanager:
    image: apache/hadoop:3
    hostname: nodemanager
    command: [ "yarn", "nodemanager" ]
    env_file:
      - ./config-hadoop
    networks:
      - code-with-yu
    volumes:
      - hadoop:/home/
    restart: on-failure

volumes:
  hadoop:

networks:
  code-with-yu:



